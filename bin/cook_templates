#!perl
use v5.24;
use feature qw(signatures);
no warnings qw(experimental::signatures);
use open qw(:std :utf8);

use Data::Dumper;
use File::Basename qw(dirname);
use File::Path qw(make_path);
use FindBin;
use XML::Entities;

require "$FindBin::Bin/current_package_details";
require "$FindBin::Bin/latest_rakudo_msi_details";
require "$FindBin::Bin/get_readme";

my $current_details = current_package_details::get_package_details();
say Dumper($current_details);

my $last_rakudo_details = latest_rakudo_msi_details::get_details();
say Dumper($last_rakudo_details);

my $readme_details = get_readme::get_readme_stuff();
say Dumper($readme_details);

$readme_details->{markdown_xml_escaped} = XML::Entities::numify( 'all', $readme_details->{markdown} );

my @templates = glob( 'templates/*.template templates/*/*.template' );

make_path 'cooked_templates';

foreach my $template ( @templates ) {
	say "Processing $template";
	my $data = do { local( @ARGV, $/ ) = $template; <> };
	my $file = "cooked_$template";
	$file =~ s/\.template$//;

	my $dirname = dirname $file;
	make_path $dirname;

	open my $fh, '>:utf8', $file
		or die "Could not open <cooked_$template>: $!";

	$data =~ s/%%SHA256%%/$last_rakudo_details->{sha256}/g;
	$data =~ s/%%VERSION%%/$last_rakudo_details->{version}/g;
	$data =~ s/%%URL%%/$last_rakudo_details->{url}/g;
	$data =~ s/%%README%%/$readme_details->{markdown_xml_escaped}/g;

	print {$fh} $data;
	close $fh;
	}

__END__
